// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offline_bbox.proto

#include "offline_bbox.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace offline_bbox {
PROTOBUF_CONSTEXPR Bbox::Bbox(
    ::_pbi::ConstantInitialized)
  : obj_id_(0)
  , bbox_x_(0)
  , bbox_y_(0)
  , bbox_w_(0)
  , bbox_h_(0)
  , bbox_p_(0){}
struct BboxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BboxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BboxDefaultTypeInternal() {}
  union {
    Bbox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BboxDefaultTypeInternal _Bbox_default_instance_;
PROTOBUF_CONSTEXPR offline_bboxes::offline_bboxes(
    ::_pbi::ConstantInitialized)
  : bbox_()
  , time_sec_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seq_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , update_freq_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct offline_bboxesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR offline_bboxesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~offline_bboxesDefaultTypeInternal() {}
  union {
    offline_bboxes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 offline_bboxesDefaultTypeInternal _offline_bboxes_default_instance_;
}  // namespace offline_bbox
static ::_pb::Metadata file_level_metadata_offline_5fbbox_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_offline_5fbbox_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_offline_5fbbox_2eproto = nullptr;

const uint32_t TableStruct_offline_5fbbox_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::offline_bbox::Bbox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::Bbox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::offline_bbox::Bbox, obj_id_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::Bbox, bbox_x_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::Bbox, bbox_y_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::Bbox, bbox_w_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::Bbox, bbox_h_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::Bbox, bbox_p_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::offline_bbox::offline_bboxes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::offline_bboxes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::offline_bbox::offline_bboxes, time_sec_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::offline_bboxes, image_data_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::offline_bboxes, seq_name_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::offline_bboxes, update_freq_),
  PROTOBUF_FIELD_OFFSET(::offline_bbox::offline_bboxes, bbox_),
  0,
  1,
  2,
  3,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::offline_bbox::Bbox)},
  { 18, 29, -1, sizeof(::offline_bbox::offline_bboxes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::offline_bbox::_Bbox_default_instance_._instance,
  &::offline_bbox::_offline_bboxes_default_instance_._instance,
};

const char descriptor_table_protodef_offline_5fbbox_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022offline_bbox.proto\022\014offline_bbox\"f\n\004Bb"
  "ox\022\016\n\006obj_id\030\001 \001(\005\022\016\n\006bbox_x\030\002 \001(\005\022\016\n\006bb"
  "ox_y\030\003 \001(\005\022\016\n\006bbox_w\030\004 \001(\005\022\016\n\006bbox_h\030\005 \001"
  "(\005\022\016\n\006bbox_p\030\006 \001(\002\"\177\n\016offline_bboxes\022\020\n\010"
  "time_sec\030\001 \001(\t\022\022\n\nimage_data\030\002 \001(\014\022\020\n\010se"
  "q_name\030\003 \001(\t\022\023\n\013update_freq\030\004 \001(\t\022 \n\004bbo"
  "x\030\005 \003(\0132\022.offline_bbox.Bbox"
  ;
static ::_pbi::once_flag descriptor_table_offline_5fbbox_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_offline_5fbbox_2eproto = {
    false, false, 267, descriptor_table_protodef_offline_5fbbox_2eproto,
    "offline_bbox.proto",
    &descriptor_table_offline_5fbbox_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_offline_5fbbox_2eproto::offsets,
    file_level_metadata_offline_5fbbox_2eproto, file_level_enum_descriptors_offline_5fbbox_2eproto,
    file_level_service_descriptors_offline_5fbbox_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_offline_5fbbox_2eproto_getter() {
  return &descriptor_table_offline_5fbbox_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_offline_5fbbox_2eproto(&descriptor_table_offline_5fbbox_2eproto);
namespace offline_bbox {

// ===================================================================

class Bbox::_Internal {
 public:
  using HasBits = decltype(std::declval<Bbox>()._has_bits_);
  static void set_has_obj_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bbox_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bbox_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bbox_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bbox_h(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bbox_p(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Bbox::Bbox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:offline_bbox.Bbox)
}
Bbox::Bbox(const Bbox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&obj_id_, &from.obj_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bbox_p_) -
    reinterpret_cast<char*>(&obj_id_)) + sizeof(bbox_p_));
  // @@protoc_insertion_point(copy_constructor:offline_bbox.Bbox)
}

inline void Bbox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obj_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bbox_p_) -
    reinterpret_cast<char*>(&obj_id_)) + sizeof(bbox_p_));
}

Bbox::~Bbox() {
  // @@protoc_insertion_point(destructor:offline_bbox.Bbox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bbox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Bbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bbox::Clear() {
// @@protoc_insertion_point(message_clear_start:offline_bbox.Bbox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&obj_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bbox_p_) -
        reinterpret_cast<char*>(&obj_id_)) + sizeof(bbox_p_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bbox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_obj_id(&has_bits);
          obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bbox_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bbox_x(&has_bits);
          bbox_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bbox_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bbox_y(&has_bits);
          bbox_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bbox_w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bbox_w(&has_bits);
          bbox_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bbox_h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bbox_h(&has_bits);
          bbox_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float bbox_p = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_bbox_p(&has_bits);
          bbox_p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bbox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:offline_bbox.Bbox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obj_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_obj_id(), target);
  }

  // optional int32 bbox_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bbox_x(), target);
  }

  // optional int32 bbox_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bbox_y(), target);
  }

  // optional int32 bbox_w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bbox_w(), target);
  }

  // optional int32 bbox_h = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_bbox_h(), target);
  }

  // optional float bbox_p = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_bbox_p(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:offline_bbox.Bbox)
  return target;
}

size_t Bbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:offline_bbox.Bbox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 obj_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_obj_id());
    }

    // optional int32 bbox_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bbox_x());
    }

    // optional int32 bbox_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bbox_y());
    }

    // optional int32 bbox_w = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bbox_w());
    }

    // optional int32 bbox_h = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bbox_h());
    }

    // optional float bbox_p = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bbox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bbox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bbox::GetClassData() const { return &_class_data_; }

void Bbox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Bbox *>(to)->MergeFrom(
      static_cast<const Bbox &>(from));
}


void Bbox::MergeFrom(const Bbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:offline_bbox.Bbox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      obj_id_ = from.obj_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      bbox_x_ = from.bbox_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      bbox_y_ = from.bbox_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      bbox_w_ = from.bbox_w_;
    }
    if (cached_has_bits & 0x00000010u) {
      bbox_h_ = from.bbox_h_;
    }
    if (cached_has_bits & 0x00000020u) {
      bbox_p_ = from.bbox_p_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bbox::CopyFrom(const Bbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:offline_bbox.Bbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bbox::IsInitialized() const {
  return true;
}

void Bbox::InternalSwap(Bbox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bbox, bbox_p_)
      + sizeof(Bbox::bbox_p_)
      - PROTOBUF_FIELD_OFFSET(Bbox, obj_id_)>(
          reinterpret_cast<char*>(&obj_id_),
          reinterpret_cast<char*>(&other->obj_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bbox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offline_5fbbox_2eproto_getter, &descriptor_table_offline_5fbbox_2eproto_once,
      file_level_metadata_offline_5fbbox_2eproto[0]);
}

// ===================================================================

class offline_bboxes::_Internal {
 public:
  using HasBits = decltype(std::declval<offline_bboxes>()._has_bits_);
  static void set_has_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seq_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_update_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

offline_bboxes::offline_bboxes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bbox_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:offline_bbox.offline_bboxes)
}
offline_bboxes::offline_bboxes(const offline_bboxes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bbox_(from.bbox_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_sec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_sec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_time_sec()) {
    time_sec_.Set(from._internal_time_sec(), 
      GetArenaForAllocation());
  }
  image_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_data()) {
    image_data_.Set(from._internal_image_data(), 
      GetArenaForAllocation());
  }
  seq_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seq_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seq_name()) {
    seq_name_.Set(from._internal_seq_name(), 
      GetArenaForAllocation());
  }
  update_freq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_freq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_update_freq()) {
    update_freq_.Set(from._internal_update_freq(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:offline_bbox.offline_bboxes)
}

inline void offline_bboxes::SharedCtor() {
time_sec_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_sec_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seq_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seq_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_freq_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_freq_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

offline_bboxes::~offline_bboxes() {
  // @@protoc_insertion_point(destructor:offline_bbox.offline_bboxes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void offline_bboxes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  time_sec_.Destroy();
  image_data_.Destroy();
  seq_name_.Destroy();
  update_freq_.Destroy();
}

void offline_bboxes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void offline_bboxes::Clear() {
// @@protoc_insertion_point(message_clear_start:offline_bbox.offline_bboxes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bbox_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      time_sec_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      image_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      seq_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      update_freq_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* offline_bboxes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string time_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_time_sec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "offline_bbox.offline_bboxes.time_sec");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes image_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string seq_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_seq_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "offline_bbox.offline_bboxes.seq_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string update_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_update_freq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "offline_bbox.offline_bboxes.update_freq");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .offline_bbox.Bbox bbox = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* offline_bboxes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:offline_bbox.offline_bboxes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string time_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time_sec().data(), static_cast<int>(this->_internal_time_sec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "offline_bbox.offline_bboxes.time_sec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time_sec(), target);
  }

  // optional bytes image_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image_data(), target);
  }

  // optional string seq_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_seq_name().data(), static_cast<int>(this->_internal_seq_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "offline_bbox.offline_bboxes.seq_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_seq_name(), target);
  }

  // optional string update_freq = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_update_freq().data(), static_cast<int>(this->_internal_update_freq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "offline_bbox.offline_bboxes.update_freq");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_update_freq(), target);
  }

  // repeated .offline_bbox.Bbox bbox = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bbox_size()); i < n; i++) {
    const auto& repfield = this->_internal_bbox(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:offline_bbox.offline_bboxes)
  return target;
}

size_t offline_bboxes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:offline_bbox.offline_bboxes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .offline_bbox.Bbox bbox = 5;
  total_size += 1UL * this->_internal_bbox_size();
  for (const auto& msg : this->bbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string time_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time_sec());
    }

    // optional bytes image_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image_data());
    }

    // optional string seq_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_seq_name());
    }

    // optional string update_freq = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_update_freq());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData offline_bboxes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    offline_bboxes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*offline_bboxes::GetClassData() const { return &_class_data_; }

void offline_bboxes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<offline_bboxes *>(to)->MergeFrom(
      static_cast<const offline_bboxes &>(from));
}


void offline_bboxes::MergeFrom(const offline_bboxes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:offline_bbox.offline_bboxes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bbox_.MergeFrom(from.bbox_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_time_sec(from._internal_time_sec());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_image_data(from._internal_image_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_seq_name(from._internal_seq_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_update_freq(from._internal_update_freq());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void offline_bboxes::CopyFrom(const offline_bboxes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:offline_bbox.offline_bboxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_bboxes::IsInitialized() const {
  return true;
}

void offline_bboxes::InternalSwap(offline_bboxes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bbox_.InternalSwap(&other->bbox_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_sec_, lhs_arena,
      &other->time_sec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_data_, lhs_arena,
      &other->image_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seq_name_, lhs_arena,
      &other->seq_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &update_freq_, lhs_arena,
      &other->update_freq_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata offline_bboxes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offline_5fbbox_2eproto_getter, &descriptor_table_offline_5fbbox_2eproto_once,
      file_level_metadata_offline_5fbbox_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace offline_bbox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::offline_bbox::Bbox*
Arena::CreateMaybeMessage< ::offline_bbox::Bbox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::offline_bbox::Bbox >(arena);
}
template<> PROTOBUF_NOINLINE ::offline_bbox::offline_bboxes*
Arena::CreateMaybeMessage< ::offline_bbox::offline_bboxes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::offline_bbox::offline_bboxes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
